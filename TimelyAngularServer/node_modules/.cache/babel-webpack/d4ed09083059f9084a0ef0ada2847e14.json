{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dinoz/source/repos/TimelySystem/TimelyAngularServer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(timeLogService) {\n    this.timeLogService = timeLogService;\n    this.page = 1;\n\n    this.cleanUp = () => {\n      this.newTimeLog = undefined;\n      this.startTime = undefined;\n      this.endTime = undefined;\n      this.timePassed = undefined;\n      this.projectName = undefined;\n      this.projectId = undefined;\n    };\n\n    this.roundUp = value => {\n      let returnValue = Math.round(value * 100) / 100;\n      return returnValue;\n    };\n\n    this.DeleteProject = id => {\n      if (id) this.timeLogService.delete(id).subscribe(result => {\n        console.log(result);\n        this.initProjectAdded();\n      }, error => console.log(error));\n    };\n\n    this.EditProject = (id, name, startDate, endDate) => {\n      let newStartDate = new Date(startDate);\n      let newEndDate = new Date(endDate);\n      let newDuration = newEndDate.valueOf() - newStartDate.valueOf();\n      this.newTimeLog = {\n        id: id,\n        projectName: name,\n        startDate: startDate,\n        endDate: endDate,\n        duration: newDuration\n      };\n      this.timeLogService.update(this.newTimeLog).subscribe(result => {\n        console.log(result);\n        this.initProjectAdded();\n        this.cleanUp();\n      }, error => console.log(error));\n    };\n\n    this.StartTimer = () => {\n      this.startTime = new Date();\n      this.newTimeLog = {\n        startDate: this.startTime.toISOString()\n      };\n      this.timeLogService.create(this.newTimeLog).subscribe(result => {\n        console.log(result);\n        this.initProjectAdded();\n      }, error => console.log(error));\n    };\n\n    this.EndTimer = projectName => {\n      var _a, _b;\n\n      this.endTime = new Date();\n      if (this.startTime) this.timePassed = this.endTime.valueOf() - this.startTime.valueOf();\n      this.projectId = (_b = (_a = this.timeLogs) === null || _a === void 0 ? void 0 : _a.find(timeLog => timeLog.duration == null)) === null || _b === void 0 ? void 0 : _b.id;\n      console.log(this.projectId);\n\n      if (this.startTime && this.timePassed) {\n        this.newTimeLog = {\n          id: this.projectId,\n          projectName: projectName,\n          startDate: this.startTime.toISOString(),\n          endDate: this.endTime.toISOString(),\n          duration: Math.round(this.timePassed / 1000 * 100) / 100\n        };\n      }\n\n      console.log(this.newTimeLog);\n      this.timeLogService.update(this.newTimeLog).subscribe(result => {\n        console.log(result);\n        this.initProjectAdded();\n        this.cleanUp();\n      }, error => console.log(error));\n    };\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.timeLogService.deleteEmpty().subscribe(result => {\n        console.log(result);\n\n        _this.initProjectAdded();\n      });\n    })();\n  }\n\n  initProjectAdded() {\n    this.timeLogService.getAll().subscribe(result => {\n      this.timeLogs = result;\n    }, error => console.log(error));\n  }\n\n  writeTimes() {\n    console.log(this.startTime);\n    console.log(this.endTime);\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  styles: []\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"sources":["C:\\Users\\dinoz\\source\\repos\\TimelySystem\\TimelyAngularServer\\src\\app\\app.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { TimeLogService } from './app.service;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\r\n  public timeLogs?: TimeLog[];\r\n  public newTimeLog?: TimeLog;\r\n  public startTime?: Date;\r\n  public endTime?: Date;\r\n  public timePassed?: number;\r\n  public projectName?: string;\n  public projectId?: number;\n  page = 1;\n\n  constructor(public timeLogService: TimeLogService) { }\n\n  public async ngOnInit(): Promise<void> { // get list from server\n    this.timeLogService.deleteEmpty().subscribe(result => {\n      console.log(result);\r\n      this.initProjectAdded();\r\n    })\r\n  }\n\n  public initProjectAdded() { // call this to update list\n    this.timeLogService.getAll().subscribe(result => {\r\n      this.timeLogs = result;\r\n    }, error => console.log(error));\r\n  }\n  public writeTimes() { // tests\n    console.log(this.startTime);\r\n    console.log(this.endTime);\r\n  }\n\n  public cleanUp = (): void => { // reset all values\r\n    this.newTimeLog = undefined;\r\n    this.startTime = undefined;\r\n    this.endTime = undefined;\r\n    this.timePassed = undefined;\r\n    this.projectName = undefined;\n    this.projectId = undefined;\r\n  }\n\n  public roundUp = (value: number): number => { // round duration to .2\n    let returnValue = Math.round(value * 100) / 100;\r\n    return returnValue;\r\n  }\n\n  public DeleteProject = (id?: number): void => { // delete function\n    if(id) this.timeLogService.delete(id).subscribe(result => {\r\n      console.log(result);\r\n      this.initProjectAdded();\r\n    }, error => console.log(error));\r\n  }\n\n  public EditProject = (id: number, name: string, startDate: string, endDate: string): void => {\n    let newStartDate = new Date(startDate);\r\n    let newEndDate = new Date(endDate);\r\n    let newDuration = newEndDate.valueOf() - newStartDate.valueOf();\r\n    this.newTimeLog = {\r\n      id: id,\r\n      projectName: name,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      duration: newDuration\r\n    }\r\n    this.timeLogService.update(this.newTimeLog).subscribe(result => {\r\n      console.log(result);\r\n      this.initProjectAdded();\r\n      this.cleanUp();\r\n    }, error => console.log(error));\r\n  }\n\n  public StartTimer = (): void => { // get start time, post on server\n    this.startTime = new Date();\r\n    this.newTimeLog = {\r\n      startDate: this.startTime.toISOString()\r\n    }\r\n    this.timeLogService.create(this.newTimeLog).subscribe(result => {\r\n      console.log(result);\r\n      this.initProjectAdded();\r\n    }, error => console.log(error));\r\n  }\n\n  public EndTimer = (projectName: string): void => { // get end time, calculate duration, update on server\r\n    this.endTime = new Date();\r\n    if (this.startTime) this.timePassed = (this.endTime.valueOf() - this.startTime.valueOf());\r\n\r\n    this.projectId = this.timeLogs?.find(timeLog => timeLog.duration == null)?.id;\r\n    console.log(this.projectId);\r\n\r\n    if (this.startTime && this.timePassed) {\r\n      this.newTimeLog = {\r\n        id: this.projectId,\r\n        projectName: projectName,\r\n        startDate: this.startTime.toISOString(),\r\n        endDate: this.endTime.toISOString(),\r\n        duration: Math.round((this.timePassed/1000)*100)/100\r\n      }\r\n    }\r\n    console.log(this.newTimeLog);\r\n\r\n\r\n    this.timeLogService.update(this.newTimeLog).subscribe(result => {\r\n      console.log(result);\r\n      this.initProjectAdded();\r\n      this.cleanUp();\r\n    }, error => console.log(error));\r\n  }\n}\n\r\ninterface TimeLog { // TimeLog model\r\n  id?: number;\r\n  projectName?: string;\r\n  startDate: string;\r\n  endDate?: string;\r\n  duration?: number;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}